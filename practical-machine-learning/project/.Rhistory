library(AppliedPredictiveModeling)
prcomp(trainingIL, scale=TRUE)
trainingIL <- training[,cols]
cols <- grepl('^IL', colnames(training))
trainingIL <- training[,cols]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
cols <- grepl('^IL', colnames(training))
trainingIL <- training[,cols]
prcomp(trainingIL, scale=TRUE)
sum(prcomp)
summary(pca)
summary(prcomp(trainingIL))
summary(prcomp(trainingIL))[2,]
summary(prcomp(trainingIL))[2]
summary(prcomp(trainingIL))
x <- summary(prcomp(trainingIL))
x$importance
x$importance[2]
x$importance[2,]
sum(x$importance[2,])
pca <- preProcess(trainingIL, method="pca", pcaComp = 9)
pca$bagImp
pca
summary(pca)
pca$thresh
pca <- preProcess(trainingIL, method="pca", pcaComp = 5)
pca$thresh
pca <- preProcess(trainingIL, method="pca", pcaComp = 11)
pca$thresh
pca$bc
pca <- preProcess(trainingIL, method="pca", thresh = 90)
pca
pca$dim
pca <- preProcess(trainingIL, method="pca", thresh = 0.9)
pca$dim
pca
summar(pca)
pca$pcaComp
pca$numComp
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
cols <- grepl('^IL', colnames(training))
training <- training[,cols]
training = adData[ inTrain,]
testing = adData[-inTrain,]
colnames(training)
trainingIL <- training[,cols]
trainingIL$diagnosis <- training$diagnosis
control <- trainControl(preProcOptions = list(thresh=0.8))
predPCA <- train(trainingIL$diagnosis ~ ., method="glm", preProcess = "pca", trControl = control)
predPCA <- train(trainingIL$diagnosis ~ .,
method="glm",
preProcess = "pca",
trControl = control,
data=trainingIL)
fitPCA <- train(trainingIL$diagnosis ~ .,
method="glm",
preProcess = "pca",
trControl = control,
data=trainingIL)
testingIL <- testing[,cols]
testingIL$diagnosis <- testing$diagnosis
confusionMatrix(testing$diagnosis, predict(fitPCA, testingIL))
fit <- train(trainingIL$diagnosis ~ .,
method="glm",
data=trainingIL)
confusionMatrix(testingIL$diagnosis, predict(fit, testingIL))
confusionMatrix(testingIL$diagnosis, predict(fit, testingIL))$accuracy
confusionMatrix(testingIL$diagnosis, predict(fit, testingIL))$Accuracy
x <- confusionMatrix(testingIL$diagnosis, predict(fit, testingIL))
x$positive
x$overall
x$overall[1]
confusionMatrix(testingIL$diagnosis, predict(fit, testingIL))$overall[1]
confusionMatrix(testing$diagnosis, predict(fitPCA, testingIL))$overall[1]
round(confusionMatrix(testingIL$diagnosis, predict(fit, testingIL))$overall[1],2)
round(confusionMatrix(testing$diagnosis, predict(fitPCA, testingIL))$overall[1],2)
data(iris)
library(ggplot2)
names(iris)
table(iris$Species)
qplot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species)
library(caret)
indexTrain <- createDataPartition(iris$Species, p = 0.70, list = FALSE)
X <- iris[indexTrain,]
y <- iris[-indexTrain, ]
training <- iris[indexTrain,]
testing <- iris[-indexTrain, ]
rm(X,y)
qplot(training$Petal.Length, training$Sepal.Length, col=training$Species)
qplot(training$Sepal.Length, training$Petal.Length, col=training$Species)
qplot(training$Sepal.Length, training$Sepal.Width, col=training$Species)
qplot(training$Sepal.Length, training$Petal.Length, col=training$Species)
qplot(training$Sepal.Length, training$Petal.Width, col=training$Species)
qplot( training$Petal.Width, training$Sepal.Length, col=training$Species)
qplot( training$Petal.Width, training$Sepal.Width, col=training$Species)
qplot(Petal.Width, Sepal.Width, col=Species, data=training)
fit <- train(Sepal ~ ., method="rpart", data=training)
fit <- train(Species ~ ., method="rpart", data=training)
plot(fit)
plot(fit$finalModel)
summary(fit$finalModel)
print(fit$finalModel)
pred <- predict(fit, newdata = testing)
confusionMatrix(testing$Species, pred)
plot(fit$finalModel, uniform=True)
plot(fit$finalModel, uniform=TRUE)
library(ElemStatLearning)
install.packages("ElemStatLearning")
data(ozone)
data(Ozone)
library(dataset)
data(airquality)
summary(airquality)
plot(airquality$Temp, airquality$Ozone)
plot(airquality$Ozone, airquality$Temp)
plot(Ozone, Temp, data=airquality)
plot(airquality$Ozone, airquality$Temp)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1], replace=True)
}
for(i in 1:10){
ss <- sample(1:dim(ozone)[1], replace=True)
print(ss)
}
ozone <- data(airquality)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1], replace=True)
print(ss)
}
data(airquality)
ss <- sample(1:dim(airquality)[1], replace=True)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
print(ss)
}
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.2)
ll[i, ] <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
}
head(ll)
ll <- matrix(NA, nrow = 10, ncol = 155)
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
summary(airquality$Ozone)
airquality <- airquality[!is.na(airquality$Ozone), ]
plot(airquality$Ozone, airquality$Temp)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.2)
ll[i, ] <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
}
head(ll)
ll <- matrix(NA, nrow = 10, ncol = 155)
ss <- sample(1:dim(airquality)[1], replace=TRUE)
library(dataset)
data(airquality)
airquality <- airquality[!is.na(airquality$Ozone), ]
plot(airquality$Ozone, airquality$Temp)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.2)
ll[i, ] <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
}
head(ll)
summary(airquality$Temp)
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
summary(airqualityTemp$Ozone)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
summary(airqualityTemp$Ozone)
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.2)
ll[i, ] <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
}
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
print(summary(airqualityTemp$Ozone))
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.2)
ll[i, ] <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
}
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
print(summary(airqualityTemp$Ozone))
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.2)
ll[i, ] <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
}
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.2)
pred <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
ll[i, ] <- pred
print(summary(pred))
}
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp)
pred <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
ll[i, ] <- pred
print(summary(pred))
}
plot(airquality$Ozone, airqualityTemp$, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
plot(airquality$Ozone, airquality$Temp, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.2)
pred <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
ll[i, ] <- pred
print(summary(pred))
}
plot(airquality$Ozone, airquality$Temp, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.8)
pred <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
ll[i, ] <- pred
print(summary(pred))
}
plot(airquality$Ozone, airquality$Temp, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.1)
pred <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
ll[i, ] <- pred
print(summary(pred))
}
plot(airquality$Ozone, airquality$Temp, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.2)
pred <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
ll[i, ] <- pred
print(summary(pred))
}
plot(airquality$Ozone, airquality$Temp, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.1)
pred <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
ll[i, ] <- pred
print(summary(pred))
}
plot(airquality$Ozone, airquality$Temp, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
?loess
rfFit <- train(Species ~ ., data=training, method="rf", prox=TRUE)
data(iris)
names(iris)
table(iris$Species)
indexTrain <- createDataPartition(iris$Species, p = 0.70, list = FALSE)
training <- iris[indexTrain,]
testing <- iris[-indexTrain, ]
rfFit <- train(Species ~ ., data=training, method="rf", prox=TRUE)
rfFit
getTree(rfFit$finalModel, K02)
getTree(rfFit$finalModel, k=2)
irisP <- classCenter(training[,c(3,4)], training$Species, rfFit$finalModel$prox)
?classCenter
irisP <- as.data.frame(irisp)
irisP <- classCenter(training[,c(3,4)], training$Species, rfFit$finalModel$prox)
irisP <- as.data.frame(irisp)
irisP <- as.data.frame(irisP)
rownames(irisP)
irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width, Petal.Lenghth, col=Species, data=training)
p + geom_point(aes(x=Petal.Width, y=Petal.Length, col=Species), size=5, shape=4, data=irisP)
p <- qplot(Petal.Width, Petal.Length, col=Species, data=training)
p + geom_point(aes(x=Petal.Width, y=Petal.Length, col=Species), size=5, shape=4, data=irisP)
p <- qplot(Petal.Width, Petal.Length, col=Species, data=training)
p + geom_point(aes(x=Petal.Width, y=Petal.Length, col=Species), size=10, shape=4, data=irisP)
pred <- predict(rfFit, testing)
testing$PredRight <- testing$Species == pred
table(pred, testing$Species)
qplot(Petal.Width, Petal.Length, col=PredRight, data=testing, main="New Data Prediction")
summary(testing)
rfFit <- train(Species ~ ., data=training, method="rf", prox=TRUE)
rfFit
pred <- predict(rfFit, testing)
testing$PredRight <- testing$Species == pred
table(pred, testing$Species)
qplot(Petal.Width, Petal.Length, col=PredRight, data=testing, main="New Data Prediction")
sum(is.na(training))
setwd("~/Repos/datasciencecoursera/practical-machine-learning/project")
training <- read.csv('./data//pml-training.csv')
dim(training)
sum(is.na(training))
is.na(training)
dim(is.na(training))
aply(is.na(training), sum, 2)
apply(is.na(training), sum, 2)
apply(is.na(training), sum)
apply(is.na(training), FUN=sum)
x <- is.na(training)
View(x)
x <- as.data.frame(is.na(training))
sum(x)
library(ggplot2)
length(x)
mapply(FUN=sum, x)
mapply(FUN=sum, x) / 19622
plot((mapply(FUN=sum, x) / 19622 * 100)?
plot((mapply(FUN=sum, x) / 19622 * 100))
barplot((mapply(FUN=sum, x) / 19622 * 100))
barhplot((mapply(FUN=sum, x) / 19622 * 100))
hbarplot((mapply(FUN=sum, x) / 19622 * 100))
barplot?
?barplot
barplot((mapply(FUN=sum, x) / 19622 * 100), horiz=TRUE)
x[,(mapply(FUN=sum, x) / 19622 * 100)>0.5]
y <- x[,(mapply(FUN=sum, x) / 19622 * 100)>0.5]
y <- x[,(mapply(FUN=sum, x) / 19622 * 100)>0.9]
colnames(x[,(mapply(FUN=sum, x) / 19622 * 100)>0.9])
colnames(training)
colnames(x[,(mapply(FUN=sum, x) / 19622 * 100)<0.9])
exclude <- colnames(x[,(mapply(FUN=sum, x) / 19622 * 100)>0.9])
training[,-exclude]
training[,exclude]
training[1:24,]
training[1:24,seq(1,4)]
training[1:24,seq(1,5)]
training[1:24,seq(1,6)]
training[1:24,seq(1,7)]
training[1:24,seq(1,8)]
training[1:24,seq(1,9)]
training[1:24,seq(1,10)]
training[1:24,seq(1,111)]
training[1:24,seq(1,11)]
training[1:24,seq(1,12)]
training[1:24,seq(1,13)]
colSums(is.na(training))
colSums(is.na(training)) == 0
colSums(is.na(training))
training <- training[, colSums(is.na(training)) == 0]
colnames(training)
grepl("*_timestamp_*", colnames(training))
grepl("*timestamp*", colnames(training))
training <- training[, grepl("*timestamp*", colnames(training))]
training <- read.csv('./data//pml-training.csv')
training <- training[, colSums(is.na(training)) == 0]
training <- training[, !grepl("*timestamp*", colnames(training))]
training <- training[, !grepl("timestamp", colnames(training))]
training <- training[, !grepl("X", colnames(training))]
training <- training[, !grepl("window", colnames(training))]
head(training)
training <- training[, !grepl("user_name", colnames(training))]
sapply(trainRaw, is.numeric)
sapply(training, is.numeric)
training[,'skewness_yaw_arm ']
training[,'skewness_yaw_arm']
trainint <- training[,sapply(training, is.numeric)]
complete.cases(training)
sum(!complete.cases(training))
sapply(training, is.numeric)
training <- read.csv('./data//pml-training.csv')
sapply(training, is.numeric)
training <- read.csv('./data//pml-training.csv')
training <- training[, colSums(is.na(training)) == 0]
training <- training[, !grepl("timestamp", colnames(training))]
training <- training[, !grepl("X", colnames(training))]
training <- training[, !grepl("window", colnames(training))]
training <- training[, !grepl("user_name", colnames(training))]
classe <- training$classe
training <- training[,sapply(training, is.numeric)]
trainint$classe <- classe
sum(!complete.cases(training))
# Get Data
trainingRaw <- read.csv('./data//pml-dataset.csv')
# Clean Data
cleanData <- function(dataset){
dataset <- dataset[, colSums(is.na(dataset)) == 0]
dataset <- dataset[, !grepl("timestamp", colnames(dataset))]
dataset <- dataset[, !grepl("X", colnames(dataset))]
dataset <- dataset[, !grepl("window", colnames(dataset))]
dataset <- dataset[, !grepl("user_name", colnames(dataset))]
classe <- dataset$classe
dataset <- dataset[,sapply(dataset, is.numeric)]
dataset$classe <- classe
dataset
}
training <- cleanData(trainingRaw)
sum(!complete.cases(training))
training
# Get Data
trainingRaw <- read.csv('./data//pml-training.csv')
testingRaw <- read.csv('./data//pml-testing.csv')
# Clean Data
cleanData <- function(dataset){
dataset <- dataset[, colSums(is.na(dataset)) == 0]
dataset <- dataset[, !grepl("timestamp", colnames(dataset))]
dataset <- dataset[, !grepl("X", colnames(dataset))]
dataset <- dataset[, !grepl("window", colnames(dataset))]
dataset <- dataset[, !grepl("user_name", colnames(dataset))]
classe <- dataset$classe
dataset <- dataset[,sapply(dataset, is.numeric)]
dataset$classe <- classe
dataset
}
training <- cleanData(trainingRaw)
sum(!complete.cases(training))
testing <- cleanData(testingRaw)
sum(!complete.cases(testing))
library(caret)
preProc <- preProcess(training, method="pca", pcaComp = 2)
# Get Data
trainingRaw <- read.csv('./data//pml-training.csv')
testingRaw <- read.csv('./data//pml-testing.csv')
# Clean Data
cleanData <- function(dataset){
dataset <- dataset[, colSums(is.na(dataset)) == 0]
dataset <- dataset[, !grepl("timestamp", colnames(dataset))]
dataset <- dataset[, !grepl("X", colnames(dataset))]
dataset <- dataset[, !grepl("window", colnames(dataset))]
dataset <- dataset[, !grepl("user_name", colnames(dataset))]
classe <- dataset$classe
dataset <- dataset[,sapply(dataset, is.numeric)]
dataset$classe <- classe
dataset
}
training <- cleanData(trainingRaw)
sum(!complete.cases(training))
testing <- cleanData(testingRaw)
sum(!complete.cases(testing))
# Apendix
preProc <- preProcess(training, method="pca", pcaComp = 2)
pca <- predict(preProc, training)
View(pca)
ggplot(pca, aes(x=PC1, y=PC2),colour=classe) + geom_point()
ggplot(pca, aes(x=PC1, y=PC2,colour=classe)) + geom_point()
pca$user_name <- trainingRaw$user_name
ggplot(pca, aes(x=PC1, y=PC2,colour=user_name)) + geom_point()
M <- abs(cor(training[,-53]))
qplot(x=Var1, y=Var2, data=melt(M), fill=value, geom="tile")
library(reshape)
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(M), fill=value, geom="tile")
diag(M) <- 0
which(M > 0.8, , arr.ind = TRUE)
M2 <- ifelse(M >0.8,1,0)
qplot(x=Var1, y=Var2, data=melt(M2), fill=value, geom="tile")
M <- abs(cor(training[,]))
M <- abs(cor(training[,-53]))
which(M > 0.8, , arr.ind = TRUE)
qplot(x=Var1, y=Var2, data=melt(M), fill=value, geom="tile")
fitLR <- train(classe ~ ., method='lr')
fitLR <- train(classe ~ ., method='lr', data=training)
fitLR <- train(classe ~ ., method='glm', data=training)
fitLR <- train(classe ~ ., method='rf', data=training)
