get <- function() matrix
# set inverse value
set_inverse <- function(inv) inverse <<- inv
# get inverse value
get_inverse <- function() inverse
# Returns a list of the 4 functions, this is the special "matrix"
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and
## the matrix has not changed), then the cachesolve should retrieve the
## inverse from the cache.
cacheSolve <- function(special_matrix, ...) {
inverse <- special_matrix$get_inverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- special_matrix$get()
inverse <- solve(data, ...)
special_matrix$set_inverse(inverse)
inverse
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()         # Returns original matrix
cacheSolve(amatrix)   # Computes, caches, and returns    matrix inverse
amatrix$get_inverse()  # Returns matrix inverse
cacheSolve(amatrix)   # Returns cached matrix inverse using previously computed matrix inverse
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(amatrix)   # Computes, caches, and returns new matrix inverse
amatrix$get()         # Returns matrix
amatrix$getinverse()  # Returns matrix inverse
amatrix$get_inverse()  # Returns matrix inverse
library('swirl')
install_from_swirl("Getting and Cleaning Data")
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head()
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
tbl_df
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran,r_version == "3.1.1", country == "US")
?Comparison
filter(cran,r_version <= "3.1.1", country == "IN")
filter(cran,r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country =="IN")
filter(cran,size>100500,r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
)
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran, ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2 ^ 10)
mutate(cran3, correct_size = size + 1000)
summarize(cran,avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts,20)
arragnge(top_counts,desc(count))
arrange(top_counts,desc(count))
quantile(pack_sum$unique,probs = 0.99)
top_unique <- filter(pack_sum,unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
print
submit()
submit()
cran %>%
select(ip_id,country,package,size) %>%
print()
submit()
submit()
submit()
submit()
library(datasets)
data(iris)
?iris
head(iris)
str(iris)
summary(iris)
library(dyplr)
library(dplyr)
iris <- tbl_df(iris)
iris
print(iris)
select(iris,Species==virginica)
filter(iris,Species==virginica)
filter(iris,Species=="virginica")
filter(iris,Species=="virginica") %>% summary(mean())
filter(iris,Species=="virginica") %>% summary(mean
)
iris[["Sepal.length"]]
iris[["Sepal.Length"]]
mean(iris[["Sepal.Length"]])
species <- group_by(iris,Species)
species
mean <- summarise(species,mean)
mean <- summarise(species,mean(Sepal.Length))
mean
library(datasets)
library(dplyr)
data(iris)
iris <- tbl_df(iris)
species <- group_by(iris,Species)
means <- summarize(iris,mean(Sepal.Length))
means
means <- summarize(species,mean(Sepal.Length))
means
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris, 1, mean)
summarize(iris,mean(1:5))
summarize(iris,mean(1))
summarize(iris,mean(Speal.Lenth))
summarize(iris,mean("Speal.Lenth"))
summarise(iris,mean(Sepal.Length))
summarise(iris,mean(Sepal.Length),mean(Sepal.Width),mean(Petal.Length),mean(Petal.Width))
apply(iris[, 1:4], 2, mean)
summary(iris)
library(datasets)
data(mtcars)
?mtcars
# Continuing with the 'iris' dataset from the previous Question, what R code returns a vector of the means of the variables 'Sepal.Length', 'Sepal.Width', 'Petal.Length', and 'Petal.Width'?
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
mtcars <- tbl_df(mtcars)
summarize(group_by(mtcars,cyl),ave(mtcars.mpg))
summarize(group_by(mtcars,cyl),ave("mtcars.mpg"))
cyl <- group_by(mtcars,cyl)
cyl
summarise(cyl,mean(cyl.mpg))
summarise(cyl,mean("cyl.mpg"))
summarise(cyl,mean = mean("cyl.mpg"))
summarise(cyl,mean = mean(cyl.mpg))
summarise(cyl,mean = mean(mpg))
library(datasets)
data(mtcars)
str(mtcars)
library(dplyr)
mtcars <- tbl_df(mtcars)
mtcars %>% summarise(mean(hp))
str(mtcars)
summarize(mtcars)
hp_mean <- mtcars %>% summarise(mean(hp))
hp_mean
as.integer(hp_meant)
as.integer(hp_mean)
as.double(hp_mean)
data_mtcars <- data(mtcars)
summarize(data_mtcars)
summarise(data_mtcars)
summary(data_mtcars)
summary(mtcars)
mtcars %>% filter(cyl == 4) %>% summarise(mean(hp))
mtcars %>% filter(cyl == 4)
mtcars %>% filter(cyl == 4) %>% summarise(mean(hp))
hp_mean <- mtcars %>% filter(cyl == 4) %>% summarise(mean(hp))
hp_mean <- as.double(hp_mean)
hp_mean_4 <- mtcars %>% filter(cyl == 4) %>% summarise(mean(hp))
hp_mean_4 <- as.double(hp_mean_4)
hp_mean_8 <- mtcars %>% filter(cyl == 8) %>% summarise(mean(hp))
hp_mean_8 <- as.double(hp_mean_8)
abs(hp_mean_4,hp_mean_8)
abs(hp_mean_4-hp_mean_8)
debug(ls)
ls
ls()
q
quit()
exit
exit()
q
q()
a
library(datasets)
file_path <- function(...){paste(data_dir,...,sep = "/")}
data_dir ="./rprog-data-ProgAssignment3-data/"
setwd("/home/pdelboca/Repos//datasciencecoursera/r-programming/assignment 3/")
data <- read.csv(file = file_path("outcome-of-care-measures.csv"))
names(data) <- gsub("\\.\\.\\.",".",names(data))
names(data) <- gsub("\\.\\.",".",names(data))
names(data) <- tolower(names(data))
names(data)
best()
source('~/.active-rstudio-document', echo=TRUE)
best("TX","heart attack")
best("TX","heart attack")
best("TX","heart attack")
source('~/.active-rstudio-document', echo=TRUE)
strsplit("heart attack", " ")
paste(strsplit("heart attack", " "), sep=".")
gsub(" ",".","heart attack")
gsub(" ",".","attack")
source('~/.active-rstudio-document', echo=TRUE)
data <- data[data$state == state & data[outcome] != "Not Valid",]
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(data["hospital.name"])
head(data[,"hospital.name"])
head(data["hospital.name"])
typeof(data["hospital.name"])
typeof(data[,"hospital.name"])
data[,"hospital.name"]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
typeof(best)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Repos/datasciencecoursera/r-programming/assignment 3/prog_assignment_3.R', echo=TRUE)
best("TX", "heart attack") # [1] "CYPRESS FAIRBANKS MEDICAL CENTER"
best("TX", "heart failure") # [1] "FORT DUNCAN MEDICAL CENTER"
source('~/Repos/datasciencecoursera/r-programming/assignment 3/prog_assignment_3.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
d_outcome, d_data, d_subset <- NULL
d_outcome <- d_data <- d_subset <- NULL
source('~/.active-rstudio-document', echo=TRUE)
best <- function(state, outcome) {
## Read outcome data
data <- read.csv(file = file_path("outcome-of-care-measures.csv"))
names(data) <- gsub("\\.\\.\\.",".",names(data))
names(data) <- gsub("\\.\\.",".",names(data))
names(data) <- tolower(names(data))
## Check that state and outcome are valid
if(!(state %in% state.abb)) {stop("invalid state")}
if(!(outcome %in% valid_outcomes)) {stop("invalid outcome")}
## Return hospital name in that state with lowest 30-day death
## rate
outcome <- gsub(" ",".",outcome)
outcome <- paste("hospital.30.day.death.mortality.rates.from",outcome,
sep=".")
d_outcome <- outcome
# Row subets matching state and without "Not Available values"
data <- data[data$state == state & data[outcome] != "Not Available",]
d_subset <- data
# Returns the row in which the outcome has the minium value
data <- data[which.min(data[,outcome]),]
hospital_name <- as.character(data[,"hospital.name"])
hospital_name
}
best("TX", "heart failure") # [1] "FORT DUNCAN MEDICAL CENTER"
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(d_subset)
d_subset[wich.min(data[,outcome])]
d_subset[wich.min(d_subset[,outcome])]
d_subset[wich.min(d_subset[,d_outcome])]
d_subset[which.min(d_subset[,d_outcome])]
d_subset[which.min(d_subset[,d_outcome]),]
d_subset[d_subset$hospital == "FORT DUNCAN MEDICAL CENTER",]
source('~/.active-rstudio-document', echo=TRUE)
d_data[d_subset$hospital == "FORT DUNCAN MEDICAL CENTER",]
d_data[d_subset$hospital.name == "FORT DUNCAN MEDICAL CENTER",]
d_data[d_subset$hospital.name == "FORT DUNCAN MEDICAL CENTER",c(d_outcome)]
d_dsubset[d_subset$hospital.name == "FORT DUNCAN MEDICAL CENTER",c(d_outcome)]
d_subset[d_subset$hospital.name == "FORT DUNCAN MEDICAL CENTER",]
d_subset[which.min(d_subset[,d_outcome]),]
d_subset[,d_outcome]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
d_subset[,d_outcome]
d_subset[which.min(d_subset[,d_outcome]),]
which.min(d_subset[,d_outcome])
head(d_subset[,d_outcome])
source('~/Repos/datasciencecoursera/r-programming/assignment 3/prog_assignment_3.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
as.double(d_data[,d_outcome])
d_data[,d_outcome]
source('~/.active-rstudio-document', echo=TRUE)
d_subset$hospital.30.day.death.mortality.rates.from.heart.failure
as.double(d_subset$hospital.30.day.death.mortality.rates.from.heart.failure)
val <- d_subset$hospital.30.day.death.mortality.rates.from.heart.failure
which.min(val)
source('~/.active-rstudio-document', echo=TRUE)
val <- d_subset$hospital.30.day.death.mortality.rates.from.heart.failure
which.min(val)
d_subset$hospital.30.day.death.mortality.rates.from.heart.failure
data <- read.csv(file = file_path("outcome-of-care-measures.csv"),colClasses=FALSE)
data <- read.csv(file = file_path("outcome-of-care-measures.csv"),colClasses="character")
source('~/.active-rstudio-document', echo=TRUE)
source('~/Repos/datasciencecoursera/r-programming/assignment 3/prog_assignment_3.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(data)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(dplyr)
data <- tbl_df(data[,c("hospital.name",outcome)])
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x <- data.frame(c("A","B","C"),c("1.1","2","1.5"))
x
str(x)
names(data) <- c("hospital.name","outcome")
head(data)
data[order(data[outcome])]
data[order(data[data$outcome])]
data[order(data[data$outcome]),]
data[order(data[data$outcome],),]
data[order(data[,data$outcome]),]
data[order(data[,data$outcome])]
data[,order(data[data$outcome])]
data[order(data[data$outcome]),]
data[ order(data$outcome), ]
head(data[ order(data$outcome), ])
tail(data[ order(data$outcome), ])
data[ order(data$outcome), ]
data[ order(as.double(data$outcome)), ]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Repos/datasciencecoursera/r-programming/assignment 3/rankhospital.R', echo=TRUE)
data[,outcome] <- as.double(data[,outcome])
source('~/.active-rstudio-document', echo=TRUE)
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Repos/datasciencecoursera/r-programming/assignment 3/rankall.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
rank <- data.frame(NA,NA,row.names = c("hospital","state"))
rank <- data.frame(NA,row.names = c("hospital","state"))
rank <- data.frame(row.names = c("hospital","state"))
View(rank)
rank <- data.frame()
names(rank) <-  c("hospital","state")
rank <- cbind("hospital")
rank <- NA
rank <- cbind(rank,"hospital")
rank <- cbing(rank,"state")
rank <- NA
rank <- cbind(rank,"hospital")
rank <- cbing(rank,"state")
rank <- data.frame()
rank <- cbind(rank, "hospital")
rank <- data.frame(hospital = as.character(),state = as.character())
rank <- rbind(rank,c("hospital 1","TX"))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
debugSource('~/Repos/datasciencecoursera/r-programming/assignment 3/rankall.R', echo=TRUE)
debugSource('~/Repos/datasciencecoursera/r-programming/assignment 3/rankall.R', echo=TRUE)
debugSource('~/Repos/datasciencecoursera/r-programming/assignment 3/rankall.R', echo=TRUE)
rank <- rbind(rank,c("hospital 1","TX"))
tail(data$)
tail(data[,3])
rankall("heart attack","best")
debugSource('~/Repos/datasciencecoursera/r-programming/assignment 3/rankall.R', echo=TRUE)
}
rank
debugSource('~/Repos/datasciencecoursera/r-programming/assignment 3/rankall.R', echo=TRUE)
debugSource('~/Repos/datasciencecoursera/r-programming/assignment 3/rankall.R', echo=TRUE)
head(rank_hospitals)
debugSource('~/Repos/datasciencecoursera/r-programming/assignment 3/rankall.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(r)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Repos/datasciencecoursera/r-programming/assignment 3/rankall.R', echo=TRUE)
head(r)
head(r,10)
r[states = "AK"]
r[states = "AK",]
r[r$states == "AK",]
debugSource('~/Repos/datasciencecoursera/r-programming/assignment 3/rankall.R', echo=TRUE)
View(state_data)
source('~/.active-rstudio-document', echo=TRUE)
head(r)
head(r,10)
source('~/.active-rstudio-document', echo=TRUE)
head(r)
head(r,10)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Repos/datasciencecoursera/r-programming/assignment 3/rankall.R', echo=TRUE)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
library(swirl)
rm(list=ls())
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2,key,value)
gather(students2,sex_class,count)
gather(students2,sex_class,count,-grade)
res <- gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
submit()
submit()
submit()
skip()
students3
submit()
skip()
