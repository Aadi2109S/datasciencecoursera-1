library(ggplot2)
data(diamonds)
diamonds[which.max(diamonds$price),]
diamonds[diamonds$price == 18823,] # 18820 doesn't exist!?!?!?
summary(diamonds$price) # Max = 18820
class(diamonds$price)
?summary
summary(as.numeric(diamonds$price))
summary(diamonds$depth)
diamonds[which.max(diamonds$depth),]
summary(diamonds)
sum(!is.na(diamonds))
sum(is.na(diamonds))
summary(diamonds$price)
diamond$pri
diamonds$price
library(ggplot)
library(ggplot2)
data(diamonds)
summary(diamonds)
summary(diamonds$price)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
lm(x~w)
plot (x,w)
weighted.mean(x, w) # 0.1471
sum(x*w)/7
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y)
lm(y ~ x - 1)
plot(x,y)
library(ggplot)
library(ggplot2)
qplot(x,y)
qplot(x,y) + geom_abline(lm(y ~ x -1))
qplot(x,y) + stat_smooth(method="lm", se=FALSE)
lm(y ~ x - 1)
lm(y ~ x - 1)
coef <- lm(y ~ x - 1)
coef <- lm(y ~ x - 1)[2]
coef(lm(y ~ x - 1))
coef <- coef(lm(y ~ x - 1))
qplot(x,y) + abline(intercept = 0, coef = coef)
qplot(x,y) + geom_abline(intercept = 0, coef = coef)
qplot(x,y) + stat_smooth(method="glm", se=FALSE)
qplot(x,y) + stat_smooth(method="rlm", se=FALSE)
coef <- coef(lm(y ~ x - 1))
qplot(x,y) + geom_abline(intercept = 0, coef = coef)
qplot(x,y) + stat_smooth(method="lm", se=FALSE)
qplot(x,y) + stat_smooth(method="glm", se=FALSE)
fit <- lm(y ~ x - 1)
summary(fit)
data(mtcars)
fit <- lm(mpg ~ weight, mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
coef(fit)[2]
coef(fit)["x"]
summary(fit)
std <- 2
correlation <- 0.5
beta1 <- correlation*std
beta1
qplot(x,y) + stat_smooth(method="lm")
correlation <- 0.4
q1 <- 1.5
q2 <- q1 * correlation * 1 + 0
q2
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean <- mean(x)
sd <- sd(x)
normalized <- (x[1] - mean)/sd
normalized
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y ~ x)
summary(fit)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
library(devtools)
install_github("pablobarbera/Rfacebook/Rfacebook")
installed.packages(devtools)
installed.packages("devtools")
installed.packages("devtools")
installed.packages("RFacebook")
install.packages("RFacebook")
install.packages("Rfacebook")
install.packages("devtools")
install_github("pablobarbera/Rfacebook/Rfacebook")
library(devtools)
install_github("pablobarbera/Rfacebook/Rfacebook")
fb_oauth <- fbOAuth(app_id="1519219218352704", app_secret="24301b2dae397079ea86aeb7e26841ab",extended_permissions = TRUE)
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="1519219218352704", app_secret="24301b2dae397079ea86aeb7e26841ab",extended_permissions = TRUE)
save(fb_oauth, file="fb_oauth")
me <- getUsers("me",token=fb_oauth)
View(me)
my_likes <- getLikes(user="me", token=fb_oauth)
View(my_likes)
my_friends <- getFriends(token=fb_oauth, simplify = TRUE)
token = "CAACEdEose0cBAN5UYiFplZB9CU3GFdHNZCA1bEPN0jrZAVaGRNp0rXq1ifuQarUR2SZAV5Vx64plUTZC5Tmmb6QjTJodKxJO8xR0S3FnF0ZCkd31hHPEtq42mm3nK7pxWv9ykLUECByRZBZBFo02kCnqRGO8DAsDBZCqK3rrDcLDJu4HyihZA4BI9lRnGk7Bd7CeiIr6TQoXL24883dvwujbrZCK7D3WjpYiUoZD"
require("Rfacebook")
me <- getUsers("me",token=token)
my_likes <- getLikes(user="me", token=token)
my_friends <- getFriends(token=token, simplify = TRUE)
View(my_friends)
my_friends <- getFriends(token=token)
my_friends <- getFriends(token=token,simplify = FALSE)
View(my_friends)
?getFriends
token <- fbOAuth(app_id="1519219218352704", app_secret="24301b2dae397079ea86aeb7e26841ab",extended_permissions = TRUE)
load("fb_oauth")
token <- load("fb_oauth")
me <- getUsers("me",token=token)
token <- load("Repos/facebook-analysis/fb_oauth")
token <- load("Repos/facebook-analysis/fb_oauth")
me <- getUsers("me",token=token)
token <- load("Repos/facebook-analysis/fb_oauth")
token <- fbOAuth(app_id="1519219218352704", app_secret="24301b2dae397079ea86aeb7e26841ab",extended_permissions = TRUE)
token = "CAACEdEose0cBAN5UYiFplZB9CU3GFdHNZCA1bEPN0jrZAVaGRNp0rXq1ifuQarUR2SZAV5Vx64plUTZC5Tmmb6QjTJodKxJO8xR0S3FnF0ZCkd31hHPEtq42mm3nK7pxWv9ykLUECByRZBZBFo02kCnqRGO8DAsDBZCqK3rrDcLDJu4HyihZA4BI9lRnGk7Bd7CeiIr6TQoXL24883dvwujbrZCK7D3WjpYiUoZD"
mat <- getNetwork(token, format = "adj.matrix")
library(devtools)
install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
token = "CAACEdEose0cBAN5UYiFplZB9CU3GFdHNZCA1bEPN0jrZAVaGRNp0rXq1ifuQarUR2SZAV5Vx64plUTZC5Tmmb6QjTJodKxJO8xR0S3FnF0ZCkd31hHPEtq42mm3nK7pxWv9ykLUECByRZBZBFo02kCnqRGO8DAsDBZCqK3rrDcLDJu4HyihZA4BI9lRnGk7Bd7CeiIr6TQoXL24883dvwujbrZCK7D3WjpYiUoZD"
me <- getUsers("me",token=token)
my_likes <- getLikes(user="me", token=token)
my_friends <- getFriends(token=token,simplify = FALSE)
?Mitchell
library(alr3)
?Mitchell
library(alr3)
?Mitchell
summary(Mitchell)
str(Mitchell)
ggplot(Mitchell, aes(x=Month, y=Temp)) + geom_line()
library(ggplot)
ggplot(Mitchell, aes(x=Month, y=Temp)) + geom_line()
library(ggplot2)
ggplot(Mitchell, aes(x=Month, y=Temp)) + geom_line()
ggplot(Mitchell, aes(x=Month, y=Temp)) + geom_point()
qplot(Mitchell, Month, Temp)
qplot(data = Mitchell, Month, Temp)
cor.test(Mitchell$Month, Mitchell$Temp)
cor(Mitchell$Month, Mitchell$Temp)
ggplot(data = Mitchell, aes(x = Month, y = Temp)) + geom_point() +
scale_x_discrete(breaks=seq(0, 203, 12), labels=(seq(1976,1992,1))) +
xlab('Year')
ggplot(data = Mitchell,
aes(x = Month, y = Temp),
height=600,
width=800) +
geom_point() +
scale_x_discrete(breaks=seq(0, 203, 12), labels=(seq(1976,1992,1))) +
xlab('Year')
ggplot(data = Mitchell,
aes(x = Month, y = Temp),
height=400,
width=800) +
geom_point() +
scale_x_discrete(breaks=seq(0, 203, 12), labels=(seq(1976,1992,1))) +
xlab('Year')
ggplot(data = Mitchell,
aes(x = Month, y = Temp)) +
geom_point() +
scale_x_discrete(breaks=seq(0, 203, 12), labels=seq(1976,1992,1)) +
scale_y_discrete(breaks=seq(-10,30,1), labels= seq(-10,30,1)) +
xlab('Year')
ggplot(data = Mitchell,
aes(x = Month, y = Temp)) +
geom_point() +
scale_x_discrete(breaks=seq(0, 203, 12), labels=seq(1976,1992,1)) +
scale_y_continuos(breaks=seq(-10,28,1), labels= seq(-10,28,1)) +
xlab('Year')
ggplot(data = Mitchell,
aes(x = Month, y = Temp)) +
geom_point() +
scale_x_discrete(breaks=seq(0, 203, 12), labels=seq(1976,1992,1)) +
scale_y_continuous(breaks=seq(-10,28,1), labels= seq(-10,28,1)) +
xlab('Year')
library(ggplot2)
data(diamonds)
ggplot(subset(diamonds, price < quantile(price, probs = 0.99)) &
carat < quantile(carat, probs = 0.99)) +
geom_point()
ggplot(subset(diamonds, price < quantile(diamonds$price, probs = 0.99)) &
carat < quantile(diamonds$carat, probs = 0.99),
aes(x= carat, y = price)) +
geom_point()
subset(diamonds, price < quantile(diamonds$price, probs = 0.99)) &
carat < quantile(diamonds$carat, probs = 0.99))
quantile(diamonds$carat, probs = 0.99)
subset(diamonds, quantile(diamonds$carat, probs = 0.99))
subset(diamonds, carat < quantile(diamonds$carat, probs = 0.99))
subset(diamonds, carat < quantile(diamonds$carat, probs = 0.99) & price  < quantile(diamonds$price, probs = 0.99))
ggplot(subset(diamonds, carat < quantile(diamonds$carat, probs = 0.99) &
price  < quantile(diamonds$price, probs = 0.99)),
aes(x= carat, y = price)) +
geom_point()
ggplot(diamonds, aes(x=carat, y = price)) +
geom_point() +
scale_x_continuous(lim = quantile(diamonds$carat, probs = 0.99)) +
scale_y_continuous(lim = quantile(diamonds$price, probs = 0.99))
ggplot(diamonds, aes(x=carat, y = price)) +
geom_point() +
scale_x_continuous(lim = c(0,quantile(diamonds$carat, probs = 0.99))) +
scale_y_continuous(lim = c(0,
trainUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainFile <- "./data/pml-training.csv"
testFile  <- "./data/pml-testing.csv"
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists(trainFile)) {
download.file(trainUrl, destfile=trainFile, method="curl")
}
file.exists(testFile)
ls("./data")
setwd("~/Repos/datasciencecoursera/practical-machine-learning/project")
library(ggplot2)
library(caret)
library(reshape2)
install.packages(caret)
install.packages("caret")
library(caret)
library(reshape2)
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists(trainFile)) {
download.file(trainUrl, destfile=trainFile, method="curl")
}
if (!file.exists(testFile)) {
download.file(testUrl, destfile=testFile, method="curl")
}
trainingRaw <- read.csv('./data//pml-training.csv')
testingRaw <- read.csv('./data//pml-testing.csv')
cleanData <- function(dataset){
dataset <- dataset[, colSums(is.na(dataset)) == 0]
dataset <- dataset[, !grepl("timestamp", colnames(dataset))]
dataset <- dataset[, !grepl("X", colnames(dataset))]
dataset <- dataset[, !grepl("window", colnames(dataset))]
dataset <- dataset[, !grepl("user_name", colnames(dataset))]
classe <- dataset$classe
dataset <- dataset[,sapply(dataset, is.numeric)]
dataset$classe <- classe
dataset
}
training <- cleanData(trainingRaw)
sum(!complete.cases(training))
testing <- cleanData(testingRaw)
sum(!complete.cases(testing))
fit <- train(classe ~ ., method="rf", data=training)
install.packages("e1071")
install.packages("randomForest")
install.packages("randomForest")
fit <- train(classe ~ ., method="rf", data=training)
library(ggplot2)
library(caret)
library(reshape2)
fit <- train(classe ~ ., method="rf", data=training)
trControl <- trainControl(method="cv", 7)
fit <- train(classe ~ ., method="rf", trControl=trControl,
data=training, allowParallel=TRUE, ntree=250)
install.packages('doMC')
library(doMC)
registerDoMC(cores = 5)
trControl <- trainControl(method="cv", 7)
fit <- train(classe ~ ., method="rf", trControl=trControl,
data=training, allowParallel=TRUE, ntree=250)
summary(fit)
fit
fit$finalModel
fit$finalModel$err.rate
fit$finalModel$classes
fit$finalModel$obsLevels
fit$finalModel$importance
fit$results
plot(fit)
plot(fit$finalModel)
fit$results
fit$finalModel
varImp(fit$finalModel)
varImp(fit$finalModel, scale=TRUE)
varImp(fit$finalModel, scale=FALSE)
order(varImp(fit$finalModel))
importance <- varImp(fit$finalModel)
importance[order(importance)]
importance[order(importance),]
importance[order(importance, ascending=FALSE),]
importance[order(importance, asc=FALSE),]
importance[order(importance, desc=FALSE),]
?order
importance[order(importance, decreasing=FALSE),]
importance[order(importance, decreasing=TRUE),]
importance
?varImp
imp <- varImp(sample_tree)
rownames(imp)[order(imp$Overall, decreasing=TRUE)]
imp <- varImp(fit); rownames(imp)[order(imp$Overall, decreasing=TRUE)]
imp$importance
imp$model
imp$calledFrom
imp <- varImp(fit); rownames(imp)[order(imp, decreasing=TRUE)]
imp <- varImp(fit); rownames(imp)[order(imp, decreasing=TRUE),]
rownames(imp)
importance
importance[which(order(importance)),]
which(order(importance))
order(importance)
importance[order(importance),]
importance <- as.data.frame(varImp(fit))
importance <- as.data.frame(varImp(fit$finalModel))
importance[order(importance),]
importance
colnames(importance)
importance$Overall
rownames(importance)
rownames(importance)[order(importance),]
rownames(importance)[order(importance)]
rownames(importance)[order(importance, decreasing=TRUE)]
trControl <- trainControl(method="cv", 7)
bestFit <- train(classe ~ ., method="rf", trControl=trControl,
data=training, allowParallel=TRUE, ntree=100, mtry=2)
bestFit$results
bestFit$finalModel
fit$finalModel
bestFit <- train(classe ~ ., method="rf", trControl=trControl,
data=training, allowParallel=TRUE, ntree=100, mtry=2)
bestFit$results
bestFit$finalModel
bestFit <- train(classe ~ ., method="rf", trControl=trControl,
data=training, allowParallel=TRUE, ntree=100)
bestFit$results
bestFit$finalModel
indexTrain <- createDataPartition(training, p=.7, list=FALSE)
indexTrain <- createDataPartition(training, p=0.7, list=FALSE)
indexTrain <- createDataPartition(training$classe, p=0.7, list=FALSE)
trainData <- training[indexTrain,]
testingData <- training[-indexTrain,]
detectCores()
registerDoMC(cores = detectCores() - 1) # This will use all of the cores but one
trControl <- trainControl(method="cv", 7)
fit <- train(classe ~ ., method="rf", trControl=trControl,
data=trainData, allowParallel=TRUE, ntree=250)
fit$results
fit$finalModel
pred <- predict(fit, testingData)
confussionMatrix(testingData$classe, pred)
confusionMatrix(testingData$classe, pred)
confusionMatrix(testingData$classe, pred)$Overall
confusionMatrix(testingData$classe, pred)$overall
confusionMatrix(testingData$classe, pred)$overall[1]
1 - confusionMatrix(testingData$classe, pred)$overall[1]
1 - confusionMatrix(testingData$classe, pred)$overall[1] * 100
(1 - confusionMatrix(testingData$classe, pred)$overall[1]) * 100
fit$results
fit$results[1]
fit$results[2][2]
fit$results[2]
fit$results[2,2]
`r fit$results`
fit$results
fit$
fit$finalModel
fit
fit$finalModel
confusionMatrix(testingData$classe, pred)
oos <- (1 - confusionMatrix(testingData$classe, pred)$overall[1]) * 100
1-0.9922
fit$results
1-0.9916
fit$finalModel
fit
plot(fit)
plot(fit, titles = "Accuracy vs Selected Predictors")
plot(fit, title = "Accuracy vs Selected Predictors")
plot(fit, main = "Accuracy vs Selected Predictors")
plot(fit$finalModel, main = "Accuracy vs Selected Predictors")
pca <- predict(preProc, testingData)
preProc <- preProcess(training, method="pca", pcaComp = 2)
pca <- predict(preProc, testingData)
ggplot(pca, aes(x=PC1, y=PC2,colour=classe)) + geom_point()
pca$predicted <- (testingData$classe == pred)
ggplot(pca, aes(x=PC1, y=PC2,colour=predicted)) + geom_point()
ggplot(pca, aes(x=PC1, y=PC2,colour=predicted)) + geom_point() +
geom_tile("Prediction Performance.")
geom_tile("Prediction Performance.")
ggplot(pca, aes(x=PC1, y=PC2,colour=predicted)) + geom_point() +
ggtitle("Prediction Performance.")
colnames(testing)
testing[,-c("problem_id")]
predNewData <- predict(fit, testing[, -which(names(df) %in% c("problem_id")])
testing[, -which(names(df) %in% c("problem_id")]
testing[, -which(names(df) %in% c("problem_id"))]
testing[, which(names(df) %in% c("problem_id"))]
which(names(df) %in% c("problem_id"))
which(names(testing) %in% c("problem_id"))
-which(names(testing) %in% c("problem_id"))
predNewData <- predict(fit, testing[,-which(names(testing) %in% c("problem_id")])
predNewData <- predict(fit, testing[,-which(names(testing) %in% c("problem_id"))])
predNewData
install.packages('rpart.plot')
library(rpart.plot)
install.packages('rattle')
library(rattle)
prp(fit$finalModel)
